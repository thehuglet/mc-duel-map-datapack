from bolt_expressions import Data, DataSource
from tools:utils import pos_list_to_str

SHULKER_MAX_SLOT_INDEX = 27
ysb_pos = [0, 0, 0]

def ysb_initialize(x: int, y: int, z: int):
	global ysb_pos
	
	ysb_pos = [x, y, z]
	setblock x y z minecraft:yellow_shulker_box

	loot_table minecraft:blocks/yellow_shulker_box {
		"type": "minecraft:block",
		"pools": [
			{
			"rolls": 1,
			"bonus_rolls": 0,
			"entries": [
				{
				"type": "minecraft:item",
				"name": "minecraft:yellow_shulker_box",
				"functions": [
					{
					"function": "minecraft:copy_components",
					"source": "block_entity",
					"include": [
						"minecraft:custom_name",
						"minecraft:container",
						"minecraft:lock",
						"minecraft:container_loot"
					]
					}
				]
				}
			],
			"conditions": [
				{
				"condition": "minecraft:inverted",
				"term": {
					"condition": "minecraft:match_tool",
					"predicate": {
					"predicates": {
						"minecraft:custom_data": {
						"drop_contents": 1
						}
					}
					}
				}
				}
			]
			},
			{
			"rolls": 1,
			"bonus_rolls": 0,
			"entries": [
				{
				"type": "minecraft:dynamic",
				"name": "minecraft:contents"
				}
			],
			"conditions": [
				{
				"condition": "minecraft:match_tool",
				"predicate": {
					"predicates": {
					"minecraft:custom_data": {
						"drop_contents": 1
					}
					}
				}
				}
			]
			}
		],
		"random_sequence": "minecraft:blocks/yellow_shulker_box",
		"__smithed__": {
			"priority": {
			"stage": "early"
			},
			"rules": [
			{
				"type": "append",
				"target": "pools[0].conditions",
				"source": {
				"type": "reference",
				"path": "pools[0].conditions[0]"
				}
			},
			{
				"type": "append",
				"target": "pools",
				"source": {
				"type": "reference",
				"path": "pools[1]"
				}
			}
			]
		}
	}

def ysb_get_block_data() -> DataSource:
	return Data.block(pos_list_to_str(ysb_pos))

def ysb_set_item(slot: int, item: str, count: int = 1):
	raw f'item replace block {ysb_pos[0]} {ysb_pos[1]} {ysb_pos[2]} container.{slot} with {item} {count}'

def ysb_modify_item(slot: int, item_modifier_path: str):
	raw f'item modify block {ysb_pos[0]} {ysb_pos[1]} {ysb_pos[2]} container.{slot} {item_modifier_path}'

def ysb_clear_all_items():
	execute function tools:ysb/clear_all_items:
		for i in range(SHULKER_MAX_SLOT_INDEX):
			raw f'item replace block {ysb_pos[0]} {ysb_pos[1]} {ysb_pos[2]} container.{i} with minecraft:air'

def ysb_give_all_items(selector_raw: str):
	loot give selector(selector_raw) mine ysb_pos[0] ysb_pos[1] ysb_pos[2] stick[custom_data={drop_contents: 1b}]
