from bolt_expressions import Scoreboard, ScoreSource

ANY_PARENT_TAG = 'tools.entity_link.any_parent'
ANY_CHILD_TAG = 'tools.entity_link.any_child'

parent_scoreboard = Scoreboard('tools.entity_link.parent', 'dummy')
child_scoreboard = Scoreboard('tools.entity_link.child', 'dummy')

def link_entities(parent: str, child: str):
	if not _is_single_entity_selector(parent):
		throw_error(f'Expected single entity selector for the link parent, got <{parent}>')

	if not score_exists(parent_scoreboard[parent]):
		parent_scoreboard[parent] = parent_scoreboard['#next']
		parent_scoreboard['#next'] += 1
		tag selector(parent) add ANY_PARENT_TAG
	
	child_scoreboard[child] = parent_scoreboard[parent]
	tag selector(child) add ANY_CHILD_TAG

def get_parent_entity(child: str) -> str:
	if not _is_single_entity_selector(child):
		throw_error(f'Expected single entity selector for the link child, got <{child}>')

	selected_parent_tag = 'tools.entity_link.get_parent.selected'
	ctx_independent_child_tag = 'tools.entity_link.get_parent.ctx_independent_child'
	ctx_independent_child = f'@n[tag={ctx_independent_child_tag}]'

	tag selector(child) add ctx_independent_child_tag

	as @e[tag=ANY_PARENT_TAG]:
		tag @s remove selected_parent_tag
		
		if parent_scoreboard['@s'] == child_scoreboard[child]:
			tag @s add selected_parent_tag
	
	tag selector(child) remove ctx_independent_child_tag

	return f'@n[tag={selected_parent_tag}]'

def get_children_entities(parent: str) -> str:
	if not _is_single_entity_selector(parent):
		throw_error(f'Expected single entity selector for the link parent, got <{parent}>')

	selected_child_tag = 'tools.entity_link.get_children.selected_child'
	ctx_independent_parent_tag = 'tools.entity_link.get_children.ctx_independent_parent'
	ctx_independent_parent = f'@n[tag={ctx_independent_parent_tag}]'

	tag selector(parent) add ctx_independent_parent_tag

	as @e[tag=ANY_CHILD_TAG]:
		tag @s remove selected_child_tag

		if child_scoreboard['@s'] == parent_scoreboard[ctx_independent_parent]:
			tag @s add selected_child_tag

	tag selector(parent) remove ctx_independent_parent_tag

	return f'@e[tag={selected_child_tag}]'

def _is_single_entity_selector(selector: str) -> bool:
	return selector[1] in ['s', 'n', 'p', 'r'] or 'limit=1' in selector
