from bolt_expressions import Data, Scoreboard, DataSource, ScoreSource
from nbtlib import Byte
from typing import Callable
from pvp:teams import generate_team_id, Team, get_team_color_id
from pvp:utils import default_game_object_text_display
from pvp:item_modifiers import ItemModifier
from pvp:player_balance import player_get_balance, player_subtract_balance
from tools:easy_item_modifier import EasyItemModifier
from tools:entity_link import get_children_entities, link_entities
from tools:minecraft_color_id import MinecraftColorID
from tools:ec import
	ec_set_from_container,
	ec_clear_all_items,
from tools:ysb import
	ysb_pos,
	ysb_get_block_data,
	ysb_clear_all_items,
	ysb_give_all_items,
	ysb_modify_item,
	ysb_set_item,
import tools:events as events
import tools:math as math

class ShopPageID(Enum):
	HOME = 0
	GEAR_UPGRADES = 1
	TEMPORARY_GOODS = 2
	RESOURCE_UPGRADES = 3
	BLOCKS = 4
	CONSUMABLES = 5

SHOP_ROOT_TAG = 'pvp.shop.shop_root'
SHOP_ROOT_ENTITY = 'minecraft:marker'
SHOP_GUI_ITEM_CUSTOM_DATA = 'pvp.shop.gui_item'

loaded_shop_data = {}
shop_active_page_scoreboard = Scoreboard('pvp.shop.active_page', 'dummy')
page_contents_map: dict[ShopPageID, str] = {
	ShopPageID.HOME: 'HOME',
	ShopPageID.GEAR_UPGRADES: 'GEAR_UPGRADES',
	ShopPageID.TEMPORARY_GOODS: 'TEMPORARY_GOODS',
	ShopPageID.RESOURCE_UPGRADES: 'RESOURCE_UPGRADES',
	ShopPageID.BLOCKS: 'BLOCKS',
	ShopPageID.CONSUMABLES: 'CONSUMABLES'
}

def load_shop_data(raw_data: dict):
	for shop_id, shop_data in raw_data['shop_data'].items():
		loaded_shop_data[shop_id] = shop_data

def register_shop_item_action(action_id: str, action_callback: Callable):
	with events.player_tick():
		is_shop_item_picked = score_var()
		store success score var is_shop_item_picked:
			clear @s *[minecraft:custom_data~{pvp.shop.action_id: action_id}] 0

		if is_shop_item_picked == 1:
			item_data = _get_picked_shop_gui_item_data_from_player()
			item_price = item_data.components.'minecraft:custom_data'.'pvp.shop.price'

			# print(action_id, item_price)
			if not item_price:
				action_callback()
			else:
				can_afford = player_get_balance() >= item_price
				if can_afford == 0:
					playsound minecraft:block.vault.insert_item_fail master @s ~ ~ ~ 0.5 1.75
				else:
					player_subtract_balance(item_price)
					action_callback()

					xp_sound_variation_roll = math.random(0, 1)
					if xp_sound_variation_roll == 0:
						playsound minecraft:entity.experience_orb.pickup master @s ~ ~ ~ 0.3 0.97
					if xp_sound_variation_roll == 1:
						playsound minecraft:entity.experience_orb.pickup master @s ~ ~ ~ 0.3 1.0

					playsound minecraft:entity.experience_orb.pickup master @s ~ ~ ~ 0.1 1.4
					playsound minecraft:entity.armadillo.brush master @s ~ ~ ~ 0.5 2
					playsound minecraft:item.brush.brushing.generic master @s ~ ~ ~ 0.5 1

def update_player_shop():
	active_page_id = shop_active_page_scoreboard['@s']
	page_data = loaded_shop_data['page_data']
	player_ec_items = data_var(this.EnderItems)

	_scan_and_give_back_foreign_items_to_player(this.EnderItems)
	ec_clear_all_items()

	for mapped_page_id, mapped_page_contents in page_contents_map.items():
		if active_page_id == mapped_page_id:
			_set_player_shop_page_contents(page_data[mapped_page_contents])

	clear @s *[custom_data~{pvp.shop.gui_item: 1b}]

def set_player_shop_active_page(page_id: ShopPageID):
	shop_active_page_scoreboard['@s'] = page_id

def despawn_shop(selector_: str):
	as selector(selector_) at @s:
		setblock ~ ~ ~ air

		as selector(get_children_entities('@s')):
			kill @s
		kill @s

def spawn_shop(facing_direction: str):
	temp_link_helper_tag = 'pvp.nexus.link_parent'

	summon SHOP_ROOT_ENTITY ~ ~ ~ {
		Tags: [
			SHOP_ROOT_TAG,
			temp_link_helper_tag
		],
		CustomName: f'{{"color": "light_purple", "text": "shop"}}'
	}

	summon text_display ~ ~1.2 ~ default_game_object_text_display('Shop', MinecraftColorID.LIGHT_PURPLE):
		link_entities(parent=f'@n[tag={temp_link_helper_tag}]', child='@s')

	with var Data.cast({facing_arg: facing_direction}):
		$setblock ~ ~ ~ ender_chest[facing=$(facing_arg)]

	tag @n[tag=temp_link_helper_tag] remove temp_link_helper_tag

def _get_picked_shop_gui_item_data_from_player() -> DataSource:
	item_data = data_var()
	is_shop_item_at_cursor = score_var()
	is_shop_item_at_hotbar = score_var()

	store success score var is_shop_item_at_cursor:
		if items entity @s player.cursor *[minecraft:custom_data~{pvp.shop.gui_item: 1b}]
	store success score var is_shop_item_at_hotbar:
		if items entity @s hotbar.* *[minecraft:custom_data~{pvp.shop.gui_item: 1b}]

	ysb_clear_all_items()
	if is_shop_item_at_cursor == 1:
		item replace block ysb_pos container.0 from entity @s player.cursor
		item_data = ysb_get_block_data().Items[0]

	if is_shop_item_at_hotbar == 1:
		ysb_slot_0_data = ysb_get_block_data().Items[0]
		for hotbar_slot_index in range(9):
			item replace block ysb_pos container.0 from entity @s f"hotbar.{hotbar_slot_index}"
			if ysb_slot_0_data.components.'minecraft:custom_data'[SHOP_GUI_ITEM_CUSTOM_DATA]:
				item_data = ysb_slot_0_data
		
	return item_data

def _set_player_shop_page_contents(page_data: dict):
	def get_character_slot_pattern_data(page_data: dict, character: str) -> dict:
		# Local search
		slot_data = (page_data.get('slots_pattern_data') or {}).get(character)
		if not slot_data:
			# Global search (fallback)
			global_slot_pattern_data = loaded_shop_data.get('global_pattern_data') or {}
			slot_data = global_slot_pattern_data.get(character)
	
		return slot_data

	ysb_clear_all_items()

	slots_pattern = ''.join(page_data.get('slots_pattern', '').split())
	for slot_index, slot_character in enumerate(slots_pattern):
		if slot_character == '_':
			ysb_set_item(slot_index, 'minecraft:air')
			continue

		slot_data = get_character_slot_pattern_data(page_data, slot_character)
		if slot_data is None:
			continue

		item_count = slot_data.get('item_count', 1)
		item_data = slot_data['item'].replace('\n', '')

		if '<CURRENT_SWORD_TIER_ITEM>' in item_data:
			item_data = item_data.replace('<CURRENT_SWORD_TIER_ITEM>', 'grass_block')
			# ysb_set_item(slot, 'grass_block', item_count)
		elif '<TEAM_COLOR>' in item_data:
			# Defaults team colored item to white
			ysb_set_item(slot_index, item_data.replace('<TEAM_COLOR>', MinecraftColorID.WHITE), item_count)
			
			for team in Team.iterate():
				if entity @s[team=generate_team_id(team)]:
					# Override default with team color
					ysb_set_item(slot_index, item_data.replace('<TEAM_COLOR>', get_team_color_id(team)), item_count)
		else:
			ysb_set_item(slot_index, item_data, item_count)

		ysb_modify_item(slot_index, ItemModifier.SHOP_GUI_ITEM.path)
		ysb_modify_item(slot_index, ItemModifier.SET_COMMON_RARITY.path)

		item_price = slot_data.get('price')
		item_action_id = slot_data.get('action_id', 'special_shop_none_action_id')
		ysb_slot = ysb_get_block_data().Items[{'Slot': Byte(slot_index)}]

		ysb_slot.components."minecraft:custom_data"."pvp.shop.action_id" = slot_data['action_id']

		if item_price is not None:
			ysb_slot.components."minecraft:custom_data"."pvp.shop.price" = item_price
			
			# Lore
			can_afford_item = player_get_balance() >= item_price
			if can_afford_item == 1:
				ysb_modify_item(slot_index, _generate_price_lore_modifier(item_price, can_afford=true).path)
			else:
				ysb_modify_item(slot_index, _generate_price_lore_modifier(item_price, can_afford=false).path)

	ec_set_from_container(ysb_pos)

def _scan_and_give_back_foreign_items_to_player(player_ec_items: DataSource):
	# player_ec_items has to be a player source!
	for slot_id in range(27):
		current_item = player_ec_items[{Slot: Byte(slot_id)}]
		is_empty_slot = score_var(not current_item)
		if not is_empty_slot:
			nbt_path = f"{current_item._path}.components.\"minecraft:custom_data\"{{{SHOP_GUI_ITEM_CUSTOM_DATA}: 1b}}"
			unless data entity @s nbt_path:
				_give_item_to_player(current_item)

def _give_item_to_player(item_data: DataSource):
	copied_item_data = data_var(item_data)
	copied_item_data.Slot = Byte(0)

	ysb_clear_all_items()
	ysb_get_block_data().Items.append(copied_item_data)
	ysb_give_all_items('@s')

def _generate_price_lore_modifier(price: int, can_afford: bool) -> EasyItemModifier:
	can_afford_line = {
		"text": "Click to buy!",
		"color": "green",
		"italic": false,
	}
	too_poor_line = {
		"text": "Not enough coins!",
		"color": "red",
		"italic": false,
	}

	return EasyItemModifier(
		[
			{
				"function": "minecraft:set_lore",
				"lore": [
					{
						"text": " "
					},
					{
						"text": "Price: ",
						"color": "gray",
						"italic": false,
						"extra": [
							{
								"text": f"{price} ‚õÅ",
								"color": "gold",
								"italic": false,
								"extra": [
									{
										"text": " ",
										"color": "gold",
										"italic": false
									}
								]
							}
						]
					},
					[too_poor_line, can_afford_line][int(can_afford)]
				],
				"mode": "append"
			}
		]
	)
