from bolt_expressions import Data
from nbtlib import Byte
from pvp:teams import TEAM_COLOR_IDS, Team, generate_team_object_tag
from tools:minecraft_color_id import MinecraftColorID
from tools:angle import offset_angle, snap_angle_to_cardinal_direction

ANY_MAP_MARKER_TAG = 'pvp.map_markers.any_map_marker'
MAP_MARKER_ENTITY = 'minecraft:armor_stand'
DEFAULT_MAP_MARKER_DATA = {
	'CustomNameVisible': Byte(1),
	'Tags': [ANY_MAP_MARKER_TAG],
	'NoGravity': Byte(1),
	'Silent': Byte(1),
	'Small': Byte(1),
}

loaded_map_marker_data = {}

def load_map_marker_data(raw_data: dict):
	for map_marker_id, map_marker_data in raw_data['map_marker_data'].items():
		loaded_map_marker_data[map_marker_id] = map_marker_data

def spawn_map_marker(map_marker_id: str):
	map_marker_data = get_map_marker_data(map_marker_id)

	summon MAP_MARKER_ENTITY ~ ~ ~ DEFAULT_MAP_MARKER_DATA:
		tag @s add generate_map_marker_id_tag(map_marker_id)
		this.CustomName = _generate_map_marker_custom_name(map_marker_id)
		this.ArmorItems[3] = {id: map_marker_data['head_block_id'], count: 1}

		map_marker_facing_angle = snap_angle_to_cardinal_direction(offset_angle(Data.entity('@p').Rotation[0], 180.0))
		this.Rotation[0] = map_marker_facing_angle
		log_chat(LogLevel.INFO, 'Spawned Map Marker', '@s')

def assign_team_to_closest_map_marker(team_: Team):
	as @n[type=MAP_MARKER_ENTITY, tag=ANY_MAP_MARKER_TAG, distance=..1.66]:
		for team_to_remove in Team.iterate():
			tag @s remove generate_team_object_tag(team_to_remove)

		for map_marker_id in loaded_map_marker_data:
			if entity @s[tag=generate_map_marker_id_tag(map_marker_id)]:
				is_team_required = get_map_marker_data(map_marker_id).get('require_team', false)
				if is_team_required:
					this.CustomName = _generate_map_marker_custom_name(map_marker_id, team_)
					tag @s add generate_team_object_tag(team_)
					log_chat(LogLevel.INFO, 'Set team of', '@s', 'to', Team.get_name(team_))

def generate_map_marker_id_tag(map_marker_id: str) -> str:
	return f'pvp.map_markers.map_marker.{map_marker_id}'

def get_map_marker_data(map_marker_id: str) -> dict:
	map_marker_data = loaded_map_marker_data.get(map_marker_id)
	if map_marker_data is None:
		throw_error(f"Received invalid map marker ID of '{map_marker_id}'")
	return map_marker_data

def _generate_map_marker_custom_name(map_marker_id: str, team_: Team | None = None) -> str:
	name_color = TEAM_COLOR_IDS.get(team_, MinecraftColorID.WHITE)
	return f'[{{"text": "[", "color": "gray"}}, \
			{{"text": "M", "color": "gold"}}, \
			{{"text": "] ", "color": "gray"}},\
			{{"text": "{map_marker_id}", "color": "{name_color}"}}]'
